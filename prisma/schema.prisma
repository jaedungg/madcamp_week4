generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model document_access_logs {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id String    @db.Uuid
  user_id     String    @db.Uuid
  accessed_at DateTime? @default(now()) @db.Timestamptz(6)
  time_spent  Int?      @default(0)
  documents   documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([accessed_at], map: "idx_access_logs_accessed_at")
  @@index([document_id], map: "idx_access_logs_document_id")
  @@index([user_id], map: "idx_access_logs_user_id")
}

model document_shares {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id   String    @db.Uuid
  owner_id      String    @db.Uuid
  share_id      String    @unique @db.VarChar(255)
  share_type    String?   @default("private") @db.VarChar(20)
  permissions   String?   @default("read") @db.VarChar(20)
  password_hash String?   @db.VarChar(255)
  expires_at    DateTime? @db.Timestamptz(6)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  is_active     Boolean?  @default(true)
  documents     documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users     @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([document_id], map: "idx_document_shares_document_id")
  @@index([owner_id], map: "idx_document_shares_owner_id")
  @@index([share_id], map: "idx_document_shares_share_id")
}

model documents {
  id                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String                   @db.Uuid
  title                String                   @db.VarChar(255)
  content              String?
  excerpt              String?
  word_count           Int?                     @default(0)
  category             String                   @db.VarChar(50)
  tags                 String[]
  status               String?                  @default("draft") @db.VarChar(20)
  priority             String?                  @default("medium") @db.VarChar(20)
  project              String?                  @db.VarChar(100)
  is_favorite          Boolean?                 @default(false)
  ai_requests_used     Int?                     @default(0)
  created_at           DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?                @default(now()) @db.Timestamptz(6)
  last_modified_at     DateTime?                @default(now()) @db.Timestamptz(6)
  search_vector        Unsupported("tsvector")?
  
  // Template-specific fields
  is_template          Boolean?                 @default(false)
  difficulty           String?                  @db.VarChar(20)
  tone                 String?                  @db.VarChar(20)
  estimated_words      Int?
  is_built_in          Boolean?                 @default(false)
  usage_count          Int?                     @default(0)
  preview              String?
  
  document_access_logs document_access_logs[]
  document_shares      document_shares[]
  users                users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category], map: "idx_documents_category")
  @@index([created_at], map: "idx_documents_created_at")
  @@index([search_vector], map: "idx_documents_search", type: Gin)
  @@index([status], map: "idx_documents_status")
  @@index([updated_at], map: "idx_documents_updated_at")
  @@index([user_id], map: "idx_documents_user_id")
  @@index([is_template], map: "idx_documents_is_template")
  @@index([usage_count], map: "idx_documents_usage_count")
  @@index([is_template, category], map: "idx_documents_template_category")
}

model users {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String                 @unique
  password             String
  name                 String
  profile_image        String?
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  document_access_logs document_access_logs[]
  document_shares      document_shares[]
  documents            documents[]
  subscriptions        subscriptions[]
  payment_orders       payment_orders[]
}

model subscriptions {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String         @db.Uuid
  plan_type         String         @db.VarChar(20) // 'premium', 'enterprise'
  status            String         @default("active") @db.VarChar(20) // 'active', 'canceled', 'expired', 'pending'
  started_at        DateTime       @default(now()) @db.Timestamptz(6)
  expires_at        DateTime?      @db.Timestamptz(6)
  canceled_at       DateTime?      @db.Timestamptz(6)
  auto_renew        Boolean        @default(true)
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  
  // Relations
  users             users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payment_orders    payment_orders[]

  @@index([user_id], map: "idx_subscriptions_user_id")
  @@index([status], map: "idx_subscriptions_status")
  @@index([expires_at], map: "idx_subscriptions_expires_at")
}

model payment_orders {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String         @db.Uuid
  subscription_id    String?        @db.Uuid
  order_id           String         @unique @db.VarChar(100) // TossPayments orderId
  payment_key        String?        @db.VarChar(200) // TossPayments paymentKey
  amount             Int            // 결제 금액 (원 단위)
  currency           String         @default("KRW") @db.VarChar(5)
  plan_type          String         @db.VarChar(20) // 'premium', 'enterprise'
  status             String         @default("pending") @db.VarChar(20) // 'pending', 'paid', 'failed', 'canceled', 'refunded'
  payment_method     String?        @db.VarChar(50) // 결제 수단
  failure_reason     String?        @db.VarChar(500) // 실패 사유
  paid_at            DateTime?      @db.Timestamptz(6)
  canceled_at        DateTime?      @db.Timestamptz(6)
  refunded_at        DateTime?      @db.Timestamptz(6)
  created_at         DateTime       @default(now()) @db.Timestamptz(6)
  updated_at         DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  
  // TossPayments specific fields
  toss_order_name    String?        @db.VarChar(100) // 주문명
  toss_customer_email String?       @db.VarChar(100) // 고객 이메일
  toss_customer_name String?        @db.VarChar(50)  // 고객명
  
  // Relations
  users              users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscriptions      subscriptions? @relation(fields: [subscription_id], references: [id], onDelete: SetNull)

  @@index([user_id], map: "idx_payment_orders_user_id")
  @@index([order_id], map: "idx_payment_orders_order_id")
  @@index([payment_key], map: "idx_payment_orders_payment_key")
  @@index([status], map: "idx_payment_orders_status")
  @@index([created_at], map: "idx_payment_orders_created_at")
  @@index([subscription_id], map: "idx_payment_orders_subscription_id")
}
